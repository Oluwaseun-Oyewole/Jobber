generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}


enum JobType {
 FullTime
 PartTime
 Internship
 Volunterr
 Contract
}

enum Experience {
  Fresh
  Beginner
  Intermediate
  Expert
  Guru
}

enum Position {
  onSite
  Remote
  Hybrid
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  }

model User{
    id          String      @default(cuid()) @id
    name        String?
    password    String?
    email       String? @unique
    createdAt   DateTime  @default(now()) @map(name: "created_at")
    updatedAt   DateTime @default(now())  @map(name: "updated_at")
    emailVerified  DateTime? @map(name:"email_verified")
    accounts        Account[]
    
    @@map(name:"users")
}


model Job{
  id      String  @default(cuid()) @id
  imageSrc  String? @map(name:"image_src")
  jobTitle  String  @map(name:"job_title")
  jobType   JobType @map(name:"job_type")
  datePosted DateTime @default(now()) @map(name:"date_posted")
  salary     Int?   
  jobInfo    String @map(name:"job_description")
  experience Experience 
  position Position
  companyName String?

  @@map(name:"jobs")

}